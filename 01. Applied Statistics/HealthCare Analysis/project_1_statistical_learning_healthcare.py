# -*- coding: utf-8 -*-
"""Project 1 - Statistical Learning_Healthcare.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z6-ZTz773zlRzduITk3mNcrfbYifuF3s

# Project Description: 
A project from Healthcare domain containing Medical Cost of people characterized by certain attributes.

# Context 
Leveraging customer information is paramount for most businesses. In the case of an insurance company, attributes of customers like the ones mentioned below can be crucial in making business decisions. Hence, knowing to explore and generate value out of such data can be an invaluable skill to have.

# Data Description

The dataset consists of the following attributes:

**age:** This column contains the age of primary beneficiary values ranging from 18 to 64.

**sex:** It contains the gender of contractor - female or male.

**bmi:** It contains the Body Mass Index of the beneficiaries. Body Mass Index provides an understanding of body - weights that are relatively low or high relative to height. It is objective index of body weight (kg/m^2) using the ratio of height to weight. Ideally it should be between 18.5 to 24.9. Here, the value is ranging from 15.96 to 53.13.

**children:** It contains the number of children covered by health insurance. The number of children ranges from 0 to 5.

**smoker:** It contains whether the benificiary is Smoker or not.

**region:** It contains the beneficiary's residential area in the US. Here four regions are taken into consideration -  northeast, southeast, southwest, northwest.

**charges:** It contains the individual medical costs billed by health insurance.

#### 1. Importing the necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from sklearn.preprocessing import LabelEncoder
from statsmodels.stats.proportion import proportions_ztest
import copy

# %matplotlib inline

"""#### 2. Reading Data as a Dataframe

1) From Google Drive via PyDrive
This is the most complicated of the three methods. I’ll show it for those that have uploaded CSV files into their Google Drive for workflow control. First, type in the following code:
"""

from google.colab import drive

drive.mount('/content/drive')

#df_Insurance = pd.read_csv('insurance.csv')

path = "/content/drive/MyDrive/Colab Notebooks/01. Applied Statistics/insurance.csv"
df_Insurance = pd.read_csv(path)
df_Insurance.head()

"""2) From Github (Files < 25MB)
The easiest way to upload a CSV file is from your GitHub repository. Click on the dataset in your repository, then click on View Raw. Copy the link to the raw dataset and store it as a string variable called url in Colab as shown below (a cleaner method but it’s not necessary). The last step is to load the url into Pandas read_csv to get the dataframe.
"""

path = "https://raw.githubusercontent.com/shruti18j/GreatLearning-PGP-AIML/main/01.%20Applied%20Statistics/insurance.csv"
df_bonus = pd.read_csv(path)

df_bonus = pd.read_csv(path)
df_bonus.head()

"""3) From a local drive
To upload from your local drive, start with the following code:
"""

from google.colab import files
uploaded = files.upload()
df_Ins = pd.read_csv('insurance.csv')
df_Ins.head()

"""# 3. Exploratory Data Analysis

#### 3a. Shape of the data
"""

df_Insurance.shape

"""The two-dimensional dataframe i.e., df_Insurance consists of 1338 rows and 7 columns.

#### 3b. Data type of each attribute
"""

df_Insurance.info()

"""The attributes "age" and "children" contains values that are of integer types. The attributes "bmi" and "charges" contains values that are of floating types. The attributes "sex", "smoker" and "region" is of type object. Thus, in all there are 3 columns that have data object types, 2 have int and floating types each. Moreover, there are no attributes that have null data.

#### 3c. To check the presence of missing value
"""

df_Insurance.isnull().sum()

"""None of the columns have null values.

#### 3d. 5 point summary of numerical attributes
"""

df_Insurance.describe().T

"""The four numerical attributes can be summarised in the following manner:

i. **age** - There are 1338 records having a mean value of 39.207025. The minimum age of the primary beneficiary is 18 and the maximum age is 64. 25% of the people are below 27 years of age, 50 % of people are below 39 years of age and 75% of people are below 51 years of age. Also, the observations in "age" differ from the mean value by 14.049960

ii. **bmi** - There are 1338 records having a mean value of 30.663397. The least observed bmi is 15.96 and the maximum recorded observation is 53.13. 25% of people have bmi below 26.29625, 50% of people have a bmi below 30.4 and 75% of people have a bmi below 34.693750. Also, the observations in "bmi" differs from the mean value by 6.098187

iii. **children** - There are 1338 records having a mean value of 1.094918. The least number of children in the family is 0 whereas the maximum number of children in a family is 5. The 25th, 50th and 75th percentile value is 0, 1 and 2 respectively. Also, the observations in "children" differ from the mean value by 1.205493

iv. **charges** - There are 1338 records having a mean value of 13270.422265. The minimum amount of medical expenses billed by the health insurance is 1121.8739 whereas the maximum amount is 63770.42801. The 25th, 50th and 75th percentile values are 4740.28715, 9382.033 and 16639.912515 respectively. Also, the standard deviation for the observed records is 12110.011237.

#### 3e. Distribution of 'bmi', 'age' and 'charges' columns
"""

#plot of 'bmi'
sns.distplot(df_Insurance['bmi'], rug = True)

"""From the above plot it seems that the observations recorded in **'bmi'** is approximately Normally Distributed. Very less people with lower bmi exits. """

#plot of 'age'
sns.distplot(df_Insurance['age'], rug = True)

"""From the above plot it seems that the observations recorded in **'age'** is not normally distributed. The plot also presents a fact that the most participation is done by the age around 20 years old customers. """

#plot for 'charges'
sns.distplot(df_Insurance['charges'], rug = True)

"""From the plot it is clear that **'charges'** is right skewed which suggests the fact that most number of individuals with lesser medical costs has been billed by insurance.

#### 3f. Measure of skewness of 'bmi', 'age' and 'charges' columns
"""

#measure of skewness of 'bmi':
df_Insurance['bmi'].skew()

"""Skewness of **'bmi'** is very less which was also clear from the plot as obtained above. """

# measure of skewness of 'age' :
df_Insurance['age'].skew()

"""**'age'** is uniformally distributed which is also evident from its low skewness."""

df_Insurance['charges'].skew()

"""**'charges'** are right-skewed which was also evident from the above drawn distribution plot.

#### 3g. Checking the presence of outliers in 'bmi', 'age' and 'charges'
"""

# presence of outliers in 'bmi' can be checked by 'boxplot'
sns.boxplot(df_Insurance['bmi'])

"""So, from the plot we can see that there are some outliers in **'bmi'**. Now the number of outliers in **'bmi'** can be calculated as mentioned below:

https://medium.datadriveninvestor.com/finding-outliers-in-dataset-using-python-efc3fce6ce32 
 
How can we identify an outlier?
*   using scatter plots
*   using Z score
*   using the IQR interquartile range

1. Using Scatter Plot

We can see the scatter plot and it shows us if a data point lies outside the overall distribution of the dataset

2. Using Z score
Formula for Z score = (Observation — Mean)/Standard Deviation  

      `z = (X — μ) / σ`



dataset= [10,12,12,13,12,11,14,13,15,10,10,10,100,12,14,13, 12,10, 10,11,12,15,12,13,12,11,14,13,15,10,15,12,10,14,13,15,10]

```
import numpy as np
import pandas as pd
import numpy as np
import pandas as pd
outliers=[]
def detect_outlier(data_1):
    
    threshold=3
    mean_1 = np.mean(data_1)
    std_1 =np.std(data_1)
    
    
    for y in data_1:
        z_score= (y - mean_1)/std_1 
        if np.abs(z_score) > threshold:
            outliers.append(y)
    return outliers


outlier_datapoints = detect_outlier(dataset)
print(outlier_datapoints)
```

3. using the IQR interquartile range

Arrange the data in increasing order :sorted(dataset)

Calculate first(q1) and third quartile(q3) : q1, q3= np.percentile(dataset,[25,75])

Find interquartile range (q3-q1) : iqr = q3 - q1

Find lower bound q1*1.5 : lower_bound = q1 -(1.5 * iqr) 
 
Find upper bound q3*1.5 : upper_bound = q3 +(1.5 * iqr)

Anything that lies outside of lower and upper bound is an outlier
"""

qb_25 = np.percentile(df_Insurance['bmi'], 25)
qb_75 = np.percentile(df_Insurance['bmi'], 75)
iqr_b = qb_75 - qb_25
cutoff_b = iqr_b * 1.5
low_lim_b = qb_25 - cutoff_b
upp_lim_b = qb_75 + cutoff_b

outlier_b = [x for x in df_Insurance['bmi'] if x < low_lim_b or x > upp_lim_b]
print("The number of outliers in 'bmi' out of 1338 records are:" , len(outlier_b))

"""Thus, there are only 9 people having extreme bmis'."""

# presence of outliers in 'age' can be checked by 'boxplot'
sns.boxplot(df_Insurance['age'])

"""From the plot it is clear that the attribute **'age'** doesn't have any outliers in them. The same can be confirmed by mathematical calculation as shown below:"""

qa_25 = np.percentile(df_Insurance['age'], 25)
qa_75 = np.percentile(df_Insurance['age'], 75)
iqr_a = qa_75 - qa_25
cutoff_a = iqr_a * 1.5
low_lim_a = qa_25 - cutoff_a
upp_lim_a = qa_75 + cutoff_a

outlier_a = [x for x in df_Insurance['age'] if x < low_lim_a or x > upp_lim_a]
print("Out of 1338 records in 'age', the number of outliers are: ", len(outlier_a))

"""Thus, for **"age"** none of the entries are extreme values."""

# presence of outliers in 'charges' can be perceived by boxplot
sns.boxplot(df_Insurance['charges'])

"""From the plot it is clear that for **'charges'** there are lot of outliers. The number of outliers can be calculated as shown below:"""

qc_25 = np.percentile(df_Insurance['charges'], 25)
qc_75 = np.percentile(df_Insurance['charges'], 75)
iqr_c = qc_75 - qc_25
cutoff_c = iqr_c * 1.5
low_lim_c = qc_25 - cutoff_c
upp_lim_c = qc_75 + cutoff_c

outlier_c = [x for x in df_Insurance['charges'] if x < low_lim_c or x > upp_lim_c]
print("Out of 1338 records in 'charges', the number of outliers are: ", len(outlier_c))

"""using z-score for charges calculating the number of outliers"""

dataset= df_Insurance['charges']

outliers=[]
def detect_outlier(data_1):

    threshold=3
    mean_1 = np.mean(data_1)
    std_1 =np.std(data_1)


    for y in data_1:
        z_score= (y - mean_1)/std_1 
        if np.abs(z_score) > threshold:
            outliers.append(y)
    return outliers


outlier_datapoints = detect_outlier(dataset)
print(outlier_datapoints)
print("Out of 1338 records in 'charges', the number of outliers are: ", len(outlier_c))

"""Thus, there are 139 records in **"charges"** that are outliers.

#### 3h. Distribution of categorical columns (include children)

#### Univariate Analysis
"""

# plotting of children
sns.countplot(df_Insurance['children'])

"""From the plot it is inferred that the maximum number of recorded customers have no children."""

# plotting of 'sex'
sns.countplot(df_Insurance['sex'])

"""From the above plot it seems that the gender ratio is not significantly different."""

# plotting of 'smoker'
sns.countplot(df_Insurance['smoker'])

"""From the above plot it is evident that the count of non-smokers are quite high as compared to smokers."""

# plotting of 'region'
sns.countplot(df_Insurance['region'])

"""From the above plot it can be inferred that the maximum number of participants are from southeast region. Apart from that the number of participants from the other three regions (southwest, northwest and northeast) are more or less same.

#### Bivariate analysis

Here we will try to plot the three categorical variables one-by-one by also having 'children' as input (for colour appearance).
"""

# plotting of 'sex' and 'children'
sns.countplot(df_Insurance['sex'], hue = df_Insurance['children'])

"""From the graph it is clear that the number of children associated with both of the genders is not significantly different."""

# plotting of 'smoker' and 'children'
sns.countplot(df_Insurance['smoker'], hue = df_Insurance['children'])

"""From the above graph it is clear that the number of children associated with smokers are significantly less than the number of children associated with non smokers."""

# plotting of 'region' and 'children'
sns.countplot(df_Insurance['region'], hue = df_Insurance['children'])

"""From the plot it is clear that in from of the region beneficiaries having no children are covered most.

Now we will try to plot the three categorical variables and children against 'charges' one-by-one.
"""

# plot of 'children' and 'charges'
sns.boxplot(x = 'children', y = 'charges', data = df_Insurance)

"""From the graph it is clear that the maximum charges are paid by customers having no children whereas least amount of charges are paid by customers having five children."""

# plot of 'sex' and 'charges'
sns.boxplot(x = 'sex', y = 'charges', data = df_Insurance)

"""From the plot it seems the number of females paying extreme charges are more as compared to males. Also, it is evident that the plotting of males is right-skewed indicating that a maximum number of males pay higher charges."""

# plot of 'smoker' and 'charges'
sns.boxplot(x = 'smoker', y = 'charges', data = df_Insurance)

"""From the plot it is evident that the maximum charges are being paid by smokers. Also, it is evident that there exists a lot of non-smokers who pay higher charges as compared to other non-smokers. Moreover, as the plotting of people who smokes are left-skewed it indicates that a maximum number of smokers pay less charges as compared to other smokers."""

# plot of 'region' and 'charges'
sns.boxplot(x = 'region', y = 'charges', data = df_Insurance)

"""From the plot it is evident that the maximum charges are being paid by customers belonging from 'southeast' region.

#### 3i. Pairplot that includes all the columns of the data frame
"""

#We have to apply LabelEncoding here as pairplot ignores string attributes
df_insurance_encoded = copy.deepcopy(df_Insurance)
df_insurance_encoded.loc[:,['sex','smoker','region']] = df_Insurance.loc[:,['sex','smoker','region']].apply(LabelEncoder().fit_transform)

sns.pairplot(df_insurance_encoded)

"""From the above plot it is clear that none of the above discussed attributes are strongly related with one another lineraly. The same fact can be supported by calculating the correlation value for the attributes and plotting a heat map:"""

#calculating the correlation coefficient
corr = df_insurance_encoded.corr()
corr

#plotting a heatmap
sns.heatmap(corr, annot = True, cmap = "ocean_r")

"""# 4. Statistical Analysis

#### 4a. Do charges of people who smoke differ significantly from the people that don't?
"""

df_Insurance['smoker'].value_counts()

"""Thus, out of 1338 individuals, 1064 individuals smokes whereas 274 individuals don't smoke. Now let us plot a scatterplot to see whether there is a dependency between the attributes **"charges"** and **"smoker"**."""

sns.scatterplot(df_Insurance['smoker'], df_Insurance['charges'])

"""Thus, from the plot it is clear that the individuals who are smokers are billed higher charges by the insurance as compared to the non-smokers. Simply, in other terms we can say that the charges paid by smokers and non-smokers are different.

This can be backed by statistical evidence. As, we have two variables here, lets try to prove the above fact by using T-test.
First of all lets state the null-hypothesis and alternative-hypothesis:

Ho (null hypothesis)       : **"Charges of smoker and non-smoker are same."**

Ha (alternative hypothesis): **"Charges of smoker and non-smoker are not same."**
"""

df_smoker_charges = np.array(df_Insurance[df_Insurance['smoker'] == 'yes']['charges'])
df_non_smoker_charges = np.array(df_Insurance[df_Insurance['smoker'] == 'no']['charges'])

t_statistic, p_value = stats.ttest_ind(df_smoker_charges, df_non_smoker_charges)

print("p-value for the test is = ", p_value)

if p_value < 0.05: # Significance level is set at 5%
    print(f'As the p-value is {p_value} which is less than 0.05, so Null Hypothesis is rejected.')
else:
    print(f'As the p-value is {p_value} which is more than 0.05, so we fail to reject Null Hypothesis.')

"""Since the p-value is less than 0.05, **the null hypothesis is rejected**. This ascertains the fact that **the charges paid by smoker and non-smoker are different**.

#### 4b. Does bmi of males differ significantly from that of females?
"""

df_Insurance['sex'].value_counts()

"""Thus, out of 1338 individuals, there are 676 males and 662 females. Now let us plot a scatterplot to see whether there is a dependency between the attributes "sex" and "bmi"."""

sns.stripplot(df_Insurance['sex'], df_Insurance['bmi'])

"""Thus, from the plot it is not clear that gender does not have any effect on bmi.

Now, lets try to ascertain this hypothesis using statistics. As, we have two variables here, lets try to prove the above fact by using T-test.
First of all lets state the null-hypothesis and alternative-hypothesis:

Ho (null hypothesis)       : **"Gender has no impact on bmi."**

Ha (alternative hypothesis): **"Gender has an impact on bmi."**
"""

df_male_bmi = np.array(df_Insurance[df_Insurance['sex'] == 'male']['bmi'])
df_female_bmi = np.array(df_Insurance[df_Insurance['sex'] == 'female']['bmi'])

t_stat_sex_bmi, p_val_sex_bmi = stats.ttest_ind(df_male_bmi, df_female_bmi)

print("p-value for the test is = ", p_val_sex_bmi)

if p_val_sex_bmi < 0.05: # Significance level is set at 5%
    print(f'As the p-value is {p_val_sex_bmi} which is less than 0.05, so Null Hypothesis is rejected.')
else:
    print(f'As the p-value is {p_val_sex_bmi} which is more than 0.05, so we fail to reject Null Hypothesis.')

"""Thus, as null hypothesis is accepted which proves the fact that **Gender has no impact on bmi**.

#### 4c. Is the proportion of smokers significantly different in different genders?
"""

pd.crosstab(df_Insurance['sex'], df_Insurance['smoker'])

"""So, in the given dataset out of 662 females - 115  females (17.37%) are smokers whereas 547 are non-smokers. Similarly, out of 676 males - 159 males (23.52%) are smokers and 517 are non-smokers. Now, let us plot a graph for the same attributes: **"smoker"** and **"sex"** (both are categorical variables)."""

sns.countplot(df_Insurance['smoker'], hue = df_Insurance['sex'])

"""Thus, from the plot it is clear that the proportion of smokers in the female population is less than the male population.

But this difference in proportion (23.52% for males and 17.37% for females) whether does have any statistical importance or not can be determined by using Z-test. First of all lets state the null-hypothesis and alternative-hypothesis:

Ho (null hypothesis) : **"Proportion of female and male smokers are same."**

Ha (alternative hypothesis): **"Proportion of female and male smokers are not same."**
"""

# to find out no of smokers in each gender
female_smokers = df_Insurance[df_Insurance['sex'] == 'female']['smoker'].value_counts()[1] 
male_smokers = df_Insurance[df_Insurance['sex'] == 'male']['smoker'].value_counts()[1]

# to find out no of male and females in the given data set
n_females = df_Insurance['sex'].value_counts()[1]
n_males = df_Insurance['sex'].value_counts()[0]

z_stat_sex_smok, p_val_sex_smok = proportions_ztest([female_smokers, male_smokers], [n_females, n_males])

print("p-value for this test is = ", p_val_sex_smok)
if p_val_sex_smok < 0.05: #Significance level is set at 5%
    print(f'As the p-value is {p_val_sex_smok} which is less than 0.05, so Null Hypothesis is rejected.')
else:
    print(f'As the p-value is {p_val_sex_smok} which is more than 0.05, so we fail to reject Null Hypothesis.')

"""As from statistical calculations, the fact that proportions of female and male smokers are same is rejected. Thus, **the proportion of male and female smokers differs significantly**.

#### 4d. Is the distribution of bmi across women with no children, one child and two children, the same?
"""

# here only records for sex = female is being considered:
sns.stripplot(df_Insurance['bmi'], df_Insurance[df_Insurance['sex'] == 'female']['children'])

"""From the graph it seems that the distribution of **'bmi'** are nearly same across women with 0, 1 or 2 children.

The fact can also be ascertained by using statistical principles. As, we have three variables here **"sex"**, **"children"** and **"bmi"** (out of which **"sex"** is a categorical attribute), here lets try to prove the above hypothesis by using ANOVA (One way ANOVA). First of all lets state the null-hypothesis and alternative-hypothesis:

Ho (null hypothesis) : **"No of children has no effect on bmi."**

Ha (alternative hypothesis): **"No of children has an effect on bmi."**
"""

df_female = copy.deepcopy(df_Insurance[df_Insurance['sex'] == 'female'])

zero_child = df_female[df_female['children'] == 0]['bmi']
one_child = df_female[df_female['children'] == 1]['bmi']
two_child = df_female[df_female['children'] == 2]['bmi']

f_stat_bmi, p_val_bmi = stats.f_oneway(zero_child, one_child, two_child)

print("p-value for this test is = ", p_val_bmi)
if p_val_bmi < 0.05: # Significance level is set at 5%
    print(f'As the p-value is {p_val_bmi} which is less than 0.05, so Null Hypothesis is rejected.')
else:
    print(f'As the p-value is {p_val_bmi} which is more than 0.05, so we fail to reject Null Hypothesis.')

"""As, we had failed to reject the null hypothesis so we can say that **the distribution of bmi across women with no children, one child and two children are same**."""